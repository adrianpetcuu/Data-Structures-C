#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <malloc.h>

typedef struct
{
	int cod;
	char* denumire;
	float pret;
} produs;

typedef struct
{
	produs inf;
	struct nodLS* next;
} nodLS; //lista secundara

typedef struct
{
	struct nodLS* inf;
	struct nodLP* next;
} nodLP; //lista principala

void inserareLS(nodLS** capLS, produs p)
{
	nodLS* nou = (nodLS*)malloc(sizeof(nodLS));
	nou->inf.cod = p.cod;
	nou->inf.denumire = (char*)malloc((strlen(p.denumire) + 1) * sizeof(char));
	strcpy(nou->inf.denumire, p.denumire);
	nou->inf.pret = p.pret;
	nou->next = NULL;
	if (*capLS == NULL)
	{
		*capLS = nou;
	}
	else
	{
		nodLS* temp = *capLS;
		while (temp->next != NULL)
		{
			temp = temp->next;
		}
		temp->next = nou;
	}
}

void traversareLS(nodLS* capLS)
{
	nodLS* temp = capLS;
	while (temp != NULL)
	{
		printf("\nCod: %d, Denumire: %s, Pret: %5.2f\n",
			temp->inf.cod, temp->inf.denumire, temp->inf.pret);
		temp = temp->next;
	}
}

void dezalocareLS(nodLS* capLS)
{
	nodLS* temp = capLS;
	while (temp != NULL)
	{
		nodLS* aux = temp->next;
		free(temp->inf.denumire);
		free(temp);
		temp = aux;
	}
}

void inserareLP(nodLP** capLP, nodLS* capLS)
{
	nodLP* nou = (nodLP*)malloc(sizeof(nodLP));
	nou->inf = capLS;
	nou->next = NULL;
	if (*capLP == NULL)
	{
		*capLP = nou;
	}
	else
	{
		nodLP* temp = *capLP;
		while (temp->next != NULL)
		{
			temp = temp->next;
		}
		temp->next = nou;
	}
}

void traversareLP(nodLP* capLP)
{
	nodLP* temp = capLP;
	int i = 1;
	while (temp != NULL)
	{
		printf("\n----------Sublista %d-----------\n", i);
		traversareLS(temp->inf);
		temp = temp->next;
		i++;
	}
}

void dezalocareLP(nodLP* capLP)
{
	nodLP* temp = capLP;
	while (temp != NULL)
	{
		nodLP* aux = temp->next;
		dezalocareLS(temp->inf);
		free(temp);
		temp = aux;
	}
}

int dezalocareLSNode(nodLS* node, char denumire[20]) {
	if (node == NULL) {
		return -1;
	}
	if (strcmp(node->inf.denumire, denumire) == 0) {
		free(node->inf.denumire);
		return 0;
	}
	return -1;
}

void stergereLP(nodLP** capLP, char denumire[20]) {
	nodLP* tempLP = *capLP;
	nodLP* prevLP = NULL;
	while (tempLP != NULL)
	{
		nodLS* tempLS = tempLP->inf;
		nodLS* prevLS = NULL;
		while (tempLS != NULL)
		{
			if (strcmp(tempLS->inf.denumire, denumire) == 0)
			{
				if (prevLS == NULL)
				{
					tempLP->inf = tempLS->next;
					free(tempLS->inf.denumire);
					free(tempLS);
					//return;
					tempLS = tempLP->inf;
				}
				else
				{
					prevLS->next = tempLS->next;
					free(tempLS->inf.denumire);
					free(tempLS);
					//return;
					tempLS = prevLS->next;
				}
			}
			else
			{
				prevLS = tempLS;
				tempLS = tempLS->next;
			}
		}
		prevLP = tempLP;
		tempLP = tempLP->next;
	}
}


int main()
{
	nodLP* capLP = NULL;
	nodLS* capLS1 = NULL;
	nodLS* capLS2 = NULL;
	nodLS* capLS3 = NULL;
	nodLS* capLS4 = NULL;
	produs p;
	char buffer[20];
	int nrProd;
	FILE* f = fopen("fisier.txt", "r");
	fscanf(f, "%d", &nrProd);
	for (int i = 0; i < nrProd; i++)
	{
		fscanf(f, "%d", &p.cod);
		fscanf(f, "%s", buffer);
		p.denumire = (char*)malloc((strlen(buffer) + 1) * sizeof(char));
		strcpy(p.denumire, buffer);
		fscanf(f, "%f", &p.pret);
		if (p.cod % 5 == 0)
		{
			inserareLS(&capLS1, p);
		}
		else if (p.cod % 7 == 0)
		{
			inserareLS(&capLS2, p);
		}
		else if (p.cod % 11 == 0)
		{
			inserareLS(&capLS3, p);
		}
		else if (p.cod % 9 == 0)
		{
			inserareLS(&capLS4, p);
		}
		free(p.denumire);
	}
	fclose(f);
	//printf("\n----------------Liste Secundare--------------\n");
	//printf("\n----------------Sublista 1--------------\n");
	//traversareLS(capLS1);
	//printf("\n----------------Sublista 2--------------\n");
	//traversareLS(capLS2);


	printf("\n----------------Lista Principala--------------\n");
	inserareLP(&capLP, capLS1);
	inserareLP(&capLP, capLS2);
	inserareLP(&capLP, capLS3);
	inserareLP(&capLP, capLS4);
	traversareLP(capLP);
	printf("\n---------------Dupa stergere-----------------\n");
	stergereLP(&capLP, "Moet");
	//stergereLP(&capLP, "Sunca");
	//stergereLP(&capLP, "Vin");
	//stergereLP(&capLP, "Coniac");
	//stergereLP(&capLP, "Oua");
	traversareLP(capLP);


	dezalocareLP(capLP);


	//dezalocareLS(capLS1);
	//dezalocareLS(capLS2);

}
